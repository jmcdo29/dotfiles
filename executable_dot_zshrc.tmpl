# If you come from bash you might have to change your $PATH.
#########################################
#      E N V   V A R I A B L E S        #
#########################################
export PATH=$HOME/bin:/usr/local/bin:$HOME/.local/bin:$HOME/go/bin:$PATH
export ZSH="/home/jay/.oh-my-zsh"
export HISTFILE=~/.zsh_history
export SAVEHIST=100000
export HISTSIZE=100000
export ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE="fg=#A6B5C5,underline"
export ZSH_AUTOSUGGEST_COMPLETION_IGNORE="git *"
export BLACK='\x1B[30m'
export RED='\x1B[31m'
export GREEN='\x1B[32m'
export YELLOW='\x1B[33m'
export BLUE='\x1B[34m'
export MAGENTA='\x1B[35m'
export CYAN='\x1B[36m'
export WHITE='\x1B[37m'
export ZSH_CACHE_DIR=/home/jay/.cache/zi
export NNN_FIFO=/tmp/nnn.fifo
export NNN_PLUG="p:preview-tui"

export TERMINAL=kitty

if [[ ! -f $HOME/.zi/bin/zi.zsh ]]; then
  print -P "%F{33}▓▒░ %F{160}Installing (%F{33}z-shell/zi%F{160})…%f"
  command mkdir -p "$HOME/.zi" && command chmod go-rwX "$HOME/.zi"
  command git clone -q --depth=1 --branch "main" https://github.com/z-shell/zi "$HOME/.zi/bin" && \
    print -P "%F{33}▓▒░ %F{34}Installation successful.%f%b" || \
    print -P "%F{160}▓▒░ The clone has failed.%f%b"
fi
source "$HOME/.zi/bin/zi.zsh"
pgrep -u "$USER" ssh-agent > /dev/null;

if [[ $? -ne 0 ]]; then
  ssh-agent > "$XDG_RUNTIME_DIR/ssh-agent.env"
fi

if [[ ! -f "$SSH_AUTH_SOCK" ]]; then
  source "$XDG_RUNTIME_DIR/ssh-agent.env" >/dev/null
fi
. ~/.keychain/Jay - Arch-sh 2> /dev/null
autoload -Uz _zi
(( ${+_comps} )) && _comps[zi]=_zi
# examples here -> https://wiki.zshell.dev/ecosystem/category/-annexes
zicompinit # <- https://wiki.zshell.dev/docs/guides/commands
# Path to your oh-my-zsh installation.

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to automatically update without prompting.
# DISABLE_UPDATE_PROMPT="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# Caution: this setting can cause issues with multiline prompts (zsh 5.7.1 and newer seem to work)
# See https://github.com/ohmyzsh/ohmyzsh/issues/5765
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder
#source $ZSH/oh-my-zsh.sh

# Plugins are loaded through Oh-My-ZSH compatibility from Zi using the OMZP for Oh-My-Zsh-Plugin
#########################################
#        O M Z   P L U G I N S          #
#########################################
zi snippet OMZP::docker
zi snippet OMZP::history
zi ice as"completion"
zi snippet https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/fd/_fd
zi snippet OMZP::fzf
zi snippet OMZP::gh
zi snippet OMZP::git
zi snippet OMZP::node
zi ice as"completion"
zi snippet https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/ripgrep/_ripgrep
zi light zsh-users/zsh-completions
zi light zsh-users/zsh-autosuggestions
zinit ice depth=1
zinit light jeffreytse/zsh-vi-mode

#########################################
#              H I S T O R Y            #
#########################################
setopt append_history         # Allow multiple sessions to append to one Zsh command history.
setopt extended_history       # Show timestamp in history.
setopt hist_expire_dups_first # Expire A duplicate event first when trimming history.
setopt hist_find_no_dups      # Do not display a previously found event.
setopt hist_ignore_all_dups   # Remove older duplicate entries from history.
setopt hist_ignore_dups       # Do not record an event that was just recorded again.
setopt hist_ignore_space      # Do not record an Event Starting With A Space.
setopt hist_reduce_blanks     # Remove superfluous blanks from history items.
setopt hist_save_no_dups      # Do not write a duplicate event to the history file.
setopt hist_verify            # Do not execute immediately upon history expansion.
setopt inc_append_history     # Write to the history file immediately, not when the shell exits.
setopt share_history          # Share history between different instances of the shell.

#########################################
#              T W E A K S              #
#########################################
setopt auto_cd              # Use cd by typing directory name if it's not a command.
setopt auto_list            # Automatically list choices on ambiguous completion.
setopt auto_pushd           # Make cd push the old directory onto the directory stack.
setopt bang_hist            # Treat the '!' character, especially during Expansion.
setopt interactive_comments # Comments even in interactive shells.
setopt multios              # Implicit tees or cats when multiple redirections are attempted.
setopt no_beep              # Don't beep on error.
setopt prompt_subst         # Substitution of parameters inside the prompt each time the prompt is drawn.
setopt pushd_ignore_dups    # Don't push multiple copies directory onto the directory stack.
setopt pushd_minus          # Swap the meaning of cd +1 and cd -1 to the opposite.

#########################################
#       C O M P L E T I O N S           #
#########################################
zstyle ':completion:*:matches' group 'yes'
zstyle ':completion:*:options' description 'yes'
zstyle ':completion:*:options' auto-description '%d'
zstyle ':completion:*:corrections' format ' %F{green}-- %d (errors: %e) --%f'
zstyle ':completion:*:descriptions' format ' %F{yellow}-- %d --%f'
zstyle ':completion:*:messages' format ' %F{purple} -- %d --%f'
zstyle ':completion:*:warnings' format ' %F{red}-- no matches found --%f'
zstyle ':completion:*:default' list-prompt '%S%M matches%s'
zstyle ':completion:*' format ' %F{yellow}-- %d --%f'
zstyle ':completion:*' group-name ''
zstyle ':completion:*' verbose yes
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'
zstyle ':completion:*:functions' ignored-patterns '(_*|pre(cmd|exec))'
zstyle ':completion:*' use-cache true
zstyle ':completion:*' rehash true
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}


#########################################
#        K E Y   B I N D I N G S        #
#########################################
## use Ctrl <- and Ctrl -> for jumping to word-beginnings on the CL
bindkey "^[[1;5C" forward-word
bindkey "^[[1;5D" backward-word                       
## the same for alt-left-arrow and alt-right-arrow            
bindkey '^[[1;3C' forward-word                          
bindkey '^[[1;3D' backward-word
bindkey '^ ' autosuggest-accept
bindkey -v

export EDITOR='hx'

#########################################
#         F U N C T I O N S             #
#########################################
ghpr() {
  GH_FORCE_TTY=1000% gh pr list | fzf --ansi --preview 'GH_FORCE_TTY=1000% gh pr view {1}' --preview-window down --header-lines 3
}
ghprch() {
  GH_FORCE_TTY=1000% gh pr list | fzf --ansi --preview 'GH_FORCE_TTY=1000% gh pr view {1}' --preview-window down --header-lines 3 | awk '{print $1}' | xargs gh pr checkout
}
#########################################
#             A L I A S E S             #
#########################################
# alias hx="helix"
alias zshconfig="code ~/.zshrc"
alias pnpmInst="curl -L https://pnpm.js.org/pnpm.js | node - add --global pnpm"
alias workDir="cd ~/Documents/code/work"
alias helpDir="cd ~/Documents/code/help"
alias projDir="cd ~/Documents/code/projects"
alias nestDir="cd ~/Documents/code/nest"
alias nr="node -e 'require(\"repl\").start({ignoreUndefined: true})' --experimental-repl-await"
alias termz="terminalizer record -k"
alias code="hx"
alias vim=hx
alias ls="exa"
alias reboot="systemctl reboot"
alias prettyStack='$(fc -ln -1) 2>&1 | sed "s|$(pwd)|~|"'
alias please='sudo $(fc -ln -1)'
alias cat='bat -p'
alias clip='xclip -sel c'
alias sdv="~/.steam/steam/steamapps/common/Stardew\ Valley/StardewValley --use-current-shell"
alias icat="kitty +kitten icat"
alias gogh='bash -c "$(wget -qO- https://git.io/vQgMr)"'
alias yay="paru"
alias ll="ls-go -aSki"
alias lls="xplr"
alias lsi="nnn -P p"
alias :q="exit"
alias NE="2>/dev/null"
alias px="pnpx"
alias pn="pnpm"
alias nest="pnpx @nestjs/cli"
alias ulid="node -e 'console.log(require(\"ulid\").ulid())'"

#########################################
#   P L U G I N S   &   T O O L S       #
#########################################
export GPGTTY=$(tty)
# if [[ $(keychain -l | grep -q 256) -ne 0 ]];
# then
#   setupKeychain;
# fi
eval $(keychain --eval --quiet ~/.ssh/id_github);
# alias ohmyzsh="mate ~/.oh-my-zsh"
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
eval "$(starship init zsh)"

# add Pulumi to the PATH
export PATH=$PATH:$HOME/.pulumi/bin

export PNPM_HOME="/home/jay/.local/share/pnpm"
export PATH="$PNPM_HOME:$PATH"

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"                   # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion" # This loads nvm bash_completion

# tabtab source for packages
# uninstall by removing these lines
[[ -f ~/.config/tabtab/zsh/__tabtab.zsh ]] && . ~/.config/tabtab/zsh/__tabtab.zsh || true
export VOLTA_HOME="$HOME/.volta"
export PATH="$VOLTA_HOME/bin:$PATH"

# bun completions
[ -s "/home/jay/.oh-my-zsh/completions/_bun" ] && source "/home/jay/.oh-my-zsh/completions/_bun"
[ -s "/usr/share/zsh/plugins/zsh-you-should-use/you-should-use.plugin.zsh" ] && source /usr/share/zsh/plugins/zsh-you-should-use/you-should-use.plugin.zsh

# Bun
export BUN_INSTALL="/home/jay/.bun"
export PATH="$BUN_INSTALL/bin:$PATH"

# source /home/jay/.config/broot/launcher/bash/br
# source /usr/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh

# pnpm
export PNPM_HOME="/home/jay/.local/share/pnpm"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac
# pnpm end